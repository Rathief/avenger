package handler

import (
	"avenger/entity"
	"avenger/repo"
	"avenger/utils"
	"encoding/json"
	"log"
	"net/http"

	"github.com/julienschmidt/httprouter"
)

type OrderHandler struct {
	DBHandler repo.DBHandler
}

func (oh OrderHandler) CreateOrder(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
	var order entity.OrderInput
	err := json.NewDecoder(r.Body).Decode(&order)
	if err != nil {
		utils.JsonResponseWriter(w, http.StatusBadRequest, err)
		log.Panic(err)
	}
	oh.DBHandler.InsertOrder(order)
	utils.JsonResponseWriter(w, http.StatusCreated, "OK")
}
func (oh OrderHandler) ReadOrders(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
	sliceOfOrders, err := oh.DBHandler.SelectAllOrders()
	if err != nil {
		utils.JsonResponseWriter(w, http.StatusInternalServerError, err)
		log.Panic(err)
	}
	utils.JsonResponseWriter(w, http.StatusAccepted, sliceOfOrders)
}
func (oh OrderHandler) ReadOrderByID(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
	id := p.ByName("id")

	o, err := oh.DBHandler.SelectOrder(id)
	if err != nil {
		utils.JsonResponseWriter(w, http.StatusInternalServerError, err)
		log.Panic(err)
	}
	utils.JsonResponseWriter(w, http.StatusAccepted, o)
}
func (oh OrderHandler) UpdateOrderByID(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
	id := p.ByName("id")
	var order entity.OrderInput
	err := json.NewDecoder(r.Body).Decode(&order)
	if err != nil {
		utils.JsonResponseWriter(w, http.StatusBadRequest, err)
		log.Panic(err)
	}

	err = oh.DBHandler.UpdateOrder(id, order)
	if err != nil {
		utils.JsonResponseWriter(w, http.StatusInternalServerError, err)
		log.Panic(err)
	}
	utils.JsonResponseWriter(w, http.StatusAccepted, "OK")
}
func (oh OrderHandler) DeleteOrderByID(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
	id := p.ByName("id")
	err := oh.DBHandler.DeleteOrder(id)
	if err != nil {
		utils.JsonResponseWriter(w, http.StatusInternalServerError, err)
	}
	utils.JsonResponseWriter(w, http.StatusAccepted, "OK")
}
